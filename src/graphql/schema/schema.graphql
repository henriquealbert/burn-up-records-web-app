type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

input ComponentSocialSocialLinkInput {
  instagram: String
  soundcloud: String
  spotify: String
  beatport: String
  youtube: String
}

type ComponentSocialSocialLinks {
  id: ID!
  instagram: String
  soundcloud: String
  spotify: String
  beatport: String
  youtube: String
}

# A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

enum ENUM_RELEASE_STATUS {
  analise
  aprovado
  corrigir
  negado
  lancado
}

enum ENUM_RELEASE_TYPE {
  single
  ep
  album
}

enum ENUM_TRACK_GENRE {
  house
  tech_house
  deep_house
}

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input InputID {
  id: ID!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

# The `Long` scalar type represents 52-bit integers
scalar Long

union Morph =
    UsersPermissionsMe
  | UsersPermissionsMeRole
  | UsersPermissionsLoginPayload
  | UserPermissionsPasswordPayload
  | Release
  | ReleaseConnection
  | ReleaseAggregator
  | ReleaseGroupBy
  | ReleaseConnectionId
  | ReleaseConnectionCreated_at
  | ReleaseConnectionUpdated_at
  | ReleaseConnectionName
  | ReleaseConnectionDate
  | ReleaseConnectionType
  | ReleaseConnectionLicensing_usage
  | ReleaseConnectionDescription
  | ReleaseConnectionArtwork
  | ReleaseConnectionProduced_by
  | ReleaseConnectionVocalist
  | ReleaseConnectionAll_royalties
  | ReleaseConnectionTerm_contract
  | ReleaseConnectionStatus
  | ReleaseConnectionCatalog
  | ReleaseConnectionUser
  | ReleaseConnectionNotes
  | createReleasePayload
  | updateReleasePayload
  | deleteReleasePayload
  | Track
  | TrackConnection
  | TrackAggregator
  | TrackGroupBy
  | TrackConnectionId
  | TrackConnectionCreated_at
  | TrackConnectionUpdated_at
  | TrackConnectionName
  | TrackConnectionMix_name
  | TrackConnectionGenre
  | TrackConnectionUrl
  | TrackConnectionISRC
  | TrackConnectionEAN_UPC
  | TrackConnectionRelease
  | TrackConnectionTrack_artist
  | TrackConnectionRemixer_name
  | createTrackPayload
  | updateTrackPayload
  | deleteTrackPayload
  | I18NLocale
  | UploadFile
  | UploadFileConnection
  | UploadFileAggregator
  | UploadFileAggregatorSum
  | UploadFileAggregatorAvg
  | UploadFileAggregatorMin
  | UploadFileAggregatorMax
  | UploadFileGroupBy
  | UploadFileConnectionId
  | UploadFileConnectionCreated_at
  | UploadFileConnectionUpdated_at
  | UploadFileConnectionName
  | UploadFileConnectionAlternativeText
  | UploadFileConnectionCaption
  | UploadFileConnectionWidth
  | UploadFileConnectionHeight
  | UploadFileConnectionFormats
  | UploadFileConnectionHash
  | UploadFileConnectionExt
  | UploadFileConnectionMime
  | UploadFileConnectionSize
  | UploadFileConnectionUrl
  | UploadFileConnectionPreviewUrl
  | UploadFileConnectionProvider
  | UploadFileConnectionProvider_metadata
  | deleteFilePayload
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsRoleConnection
  | UsersPermissionsRoleAggregator
  | UsersPermissionsRoleGroupBy
  | UsersPermissionsRoleConnectionId
  | UsersPermissionsRoleConnectionName
  | UsersPermissionsRoleConnectionDescription
  | UsersPermissionsRoleConnectionType
  | createRolePayload
  | updateRolePayload
  | deleteRolePayload
  | UsersPermissionsUser
  | UsersPermissionsUserConnection
  | UsersPermissionsUserAggregator
  | UsersPermissionsUserGroupBy
  | UsersPermissionsUserConnectionId
  | UsersPermissionsUserConnectionCreated_at
  | UsersPermissionsUserConnectionUpdated_at
  | UsersPermissionsUserConnectionUsername
  | UsersPermissionsUserConnectionEmail
  | UsersPermissionsUserConnectionProvider
  | UsersPermissionsUserConnectionConfirmed
  | UsersPermissionsUserConnectionBlocked
  | UsersPermissionsUserConnectionRole
  | UsersPermissionsUserConnectionArtist_name
  | UsersPermissionsUserConnectionAvatar
  | UsersPermissionsUserConnectionBiography
  | UsersPermissionsUserConnectionSocial_links
  | createUserPayload
  | updateUserPayload
  | deleteUserPayload
  | ComponentSocialSocialLinks

type Mutation {
  createRelease(input: createReleaseInput): createReleasePayload
  updateRelease(input: updateReleaseInput): updateReleasePayload
  deleteRelease(input: deleteReleaseInput): deleteReleasePayload
  createTrack(input: createTrackInput): createTrackPayload
  updateTrack(input: updateTrackInput): updateTrackPayload
  deleteTrack(input: deleteTrackInput): deleteTrackPayload

  # Delete one file
  deleteFile(input: deleteFileInput): deleteFilePayload

  # Create a new role
  createRole(input: createRoleInput): createRolePayload

  # Update an existing role
  updateRole(input: updateRoleInput): updateRolePayload

  # Delete an existing role
  deleteRole(input: deleteRoleInput): deleteRolePayload

  # Create a new user
  createUser(input: createUserInput): createUserPayload

  # Update an existing user
  updateUser(input: updateUserInput): updateUserPayload

  # Delete an existing user
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(
    refId: ID
    ref: String
    field: String
    source: String
    info: FileInfoInput
    file: Upload!
  ): UploadFile!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    source: String
    files: [Upload]!
  ): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  release(id: ID!, publicationState: PublicationState): Release
  releases(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [Release]
  releasesConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): ReleaseConnection
  track(id: ID!, publicationState: PublicationState): Track
  tracks(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [Track]
  tracksConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): TrackConnection
  files(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [UploadFile]
  filesConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  # Retrieve all the existing roles. You can't apply filters on this query.
  roles(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [UsersPermissionsRole]
  rolesConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [UsersPermissionsUser]
  usersConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Release {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  date: Date
  type: ENUM_RELEASE_TYPE
  licensing_usage: Boolean
  description: String
  artwork: UploadFile
  produced_by: String
  vocalist: String
  all_royalties: Boolean
  term_contract: Boolean
  status: ENUM_RELEASE_STATUS
  catalog: String
  user: UsersPermissionsUser
  notes: String
  tracks(sort: String, limit: Int, start: Int, where: JSON): [Track]
}

type ReleaseAggregator {
  count: Int
  totalCount: Int
}

type ReleaseConnection {
  values: [Release]
  groupBy: ReleaseGroupBy
  aggregate: ReleaseAggregator
}

type ReleaseConnectionAll_royalties {
  key: Boolean
  connection: ReleaseConnection
}

type ReleaseConnectionArtwork {
  key: ID
  connection: ReleaseConnection
}

type ReleaseConnectionCatalog {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionCreated_at {
  key: DateTime
  connection: ReleaseConnection
}

type ReleaseConnectionDate {
  key: ID
  connection: ReleaseConnection
}

type ReleaseConnectionDescription {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionId {
  key: ID
  connection: ReleaseConnection
}

type ReleaseConnectionLicensing_usage {
  key: Boolean
  connection: ReleaseConnection
}

type ReleaseConnectionName {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionNotes {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionProduced_by {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionStatus {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionTerm_contract {
  key: Boolean
  connection: ReleaseConnection
}

type ReleaseConnectionType {
  key: String
  connection: ReleaseConnection
}

type ReleaseConnectionUpdated_at {
  key: DateTime
  connection: ReleaseConnection
}

type ReleaseConnectionUser {
  key: ID
  connection: ReleaseConnection
}

type ReleaseConnectionVocalist {
  key: String
  connection: ReleaseConnection
}

type ReleaseGroupBy {
  id: [ReleaseConnectionId]
  created_at: [ReleaseConnectionCreated_at]
  updated_at: [ReleaseConnectionUpdated_at]
  name: [ReleaseConnectionName]
  date: [ReleaseConnectionDate]
  type: [ReleaseConnectionType]
  licensing_usage: [ReleaseConnectionLicensing_usage]
  description: [ReleaseConnectionDescription]
  artwork: [ReleaseConnectionArtwork]
  produced_by: [ReleaseConnectionProduced_by]
  vocalist: [ReleaseConnectionVocalist]
  all_royalties: [ReleaseConnectionAll_royalties]
  term_contract: [ReleaseConnectionTerm_contract]
  status: [ReleaseConnectionStatus]
  catalog: [ReleaseConnectionCatalog]
  user: [ReleaseConnectionUser]
  notes: [ReleaseConnectionNotes]
}

input ReleaseInput {
  name: String!
  date: Date
  type: ENUM_RELEASE_TYPE
  licensing_usage: Boolean
  description: String
  artwork: ID
  produced_by: String
  vocalist: String
  all_royalties: Boolean
  term_contract: Boolean
  status: ENUM_RELEASE_STATUS
  tracks: [ID]
  catalog: String
  user: ID
  notes: String
  created_by: ID
  updated_by: ID
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

# A time string with format: HH:mm:ss.SSS
scalar Time

type Track {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  mix_name: String
  genre: ENUM_TRACK_GENRE
  url: String
  ISRC: String
  EAN_UPC: String
  release: Release
  track_artist: String
  remixer_name: String
}

type TrackAggregator {
  count: Int
  totalCount: Int
}

type TrackConnection {
  values: [Track]
  groupBy: TrackGroupBy
  aggregate: TrackAggregator
}

type TrackConnectionCreated_at {
  key: DateTime
  connection: TrackConnection
}

type TrackConnectionEAN_UPC {
  key: String
  connection: TrackConnection
}

type TrackConnectionGenre {
  key: String
  connection: TrackConnection
}

type TrackConnectionISRC {
  key: String
  connection: TrackConnection
}

type TrackConnectionId {
  key: ID
  connection: TrackConnection
}

type TrackConnectionMix_name {
  key: String
  connection: TrackConnection
}

type TrackConnectionName {
  key: String
  connection: TrackConnection
}

type TrackConnectionRelease {
  key: ID
  connection: TrackConnection
}

type TrackConnectionRemixer_name {
  key: String
  connection: TrackConnection
}

type TrackConnectionTrack_artist {
  key: String
  connection: TrackConnection
}

type TrackConnectionUpdated_at {
  key: DateTime
  connection: TrackConnection
}

type TrackConnectionUrl {
  key: String
  connection: TrackConnection
}

type TrackGroupBy {
  id: [TrackConnectionId]
  created_at: [TrackConnectionCreated_at]
  updated_at: [TrackConnectionUpdated_at]
  name: [TrackConnectionName]
  mix_name: [TrackConnectionMix_name]
  genre: [TrackConnectionGenre]
  url: [TrackConnectionUrl]
  ISRC: [TrackConnectionISRC]
  EAN_UPC: [TrackConnectionEAN_UPC]
  release: [TrackConnectionRelease]
  track_artist: [TrackConnectionTrack_artist]
  remixer_name: [TrackConnectionRemixer_name]
}

input TrackInput {
  name: String
  mix_name: String
  genre: ENUM_TRACK_GENRE
  url: String
  ISRC: String
  EAN_UPC: String
  release: ID
  track_artist: String
  remixer_name: String
  created_by: ID
  updated_by: ID
}

# The `Upload` scalar type represents a file upload.
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  artist_name: String
  avatar: ID
  biography: String
  social_links: ComponentSocialSocialLinkInput
  releases: [ID]
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): [UsersPermissionsPermission]
  users(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  artist_name: String
  avatar: UploadFile
  biography: String
  social_links: ComponentSocialSocialLinks
  releases(sort: String, limit: Int, start: Int, where: JSON): [Release]
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionArtist_name {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionAvatar {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBiography {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionSocial_links {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  artist_name: [UsersPermissionsUserConnectionArtist_name]
  avatar: [UsersPermissionsUserConnectionAvatar]
  biography: [UsersPermissionsUserConnectionBiography]
  social_links: [UsersPermissionsUserConnectionSocial_links]
}

input createReleaseInput {
  data: ReleaseInput
}

type createReleasePayload {
  release: Release
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTrackInput {
  data: TrackInput
}

type createTrackPayload {
  track: Track
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

input deleteReleaseInput {
  where: InputID
}

type deleteReleasePayload {
  release: Release
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTrackInput {
  where: InputID
}

type deleteTrackPayload {
  track: Track
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editComponentSocialSocialLinkInput {
  id: ID
  instagram: String
  soundcloud: String
  spotify: String
  beatport: String
  youtube: String
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editReleaseInput {
  name: String
  date: Date
  type: ENUM_RELEASE_TYPE
  licensing_usage: Boolean
  description: String
  artwork: ID
  produced_by: String
  vocalist: String
  all_royalties: Boolean
  term_contract: Boolean
  status: ENUM_RELEASE_STATUS
  tracks: [ID]
  catalog: String
  user: ID
  notes: String
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editTrackInput {
  name: String
  mix_name: String
  genre: ENUM_TRACK_GENRE
  url: String
  ISRC: String
  EAN_UPC: String
  release: ID
  track_artist: String
  remixer_name: String
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  artist_name: String
  avatar: ID
  biography: String
  social_links: editComponentSocialSocialLinkInput
  releases: [ID]
  created_by: ID
  updated_by: ID
}

input updateReleaseInput {
  where: InputID
  data: editReleaseInput
}

type updateReleasePayload {
  release: Release
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTrackInput {
  where: InputID
  data: editTrackInput
}

type updateTrackPayload {
  track: Track
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}
